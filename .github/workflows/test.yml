# This is a basic workflow to help you get started with Actions

name: test

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      json:
        description: "json content"
        required: false
        default: ""
        type: "string"
      ip:
        description: "proxy ip"
        required: false
        default: ""
        type: "string"
      domain:
        description: "lookup domain"
        required: false
        default: ""
        type: "string"
      kvKey:
        description: "kv namespace key"
        required: false
        default: ""
        type: "string"

env:
  multilines: "${{vars.MULTILINES}}"
  CF_API_TOKEN: ${{secrets.CF_API_TOKEN}}
  CF_KV_API: https://api.cloudflare.com/client/v4/accounts/${{secrets.CF_ACCOUNT_ID}}/storage/kv/namespaces/${{secrets.CF_NAMESPACE_ID || vars.CF_NAMESPACE_ID}}/values

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: kv test
        if: ${{inputs.kvKey != ''}}
        run: |
          ret=`curl -H "Authorization:Bearer $CF_API_TOKEN" "$CF_KV_API/${{inputs.kvKey}}"`
          echo ${{inputs.kvKey}}=$ret.

      - name: action test
        run: |
          echo ----multilines vars----
          echo '${{vars.MULTILINES}}'
          echo ----
          echo "$multilines"
          TZ="Asia/Shanghai" date

      - name: comm test
        run: |
          comm --help
          echo -ne 'c.com\na.com\nb.com\n' > l.txt
          echo -ne 'd.com\nc.com\n' > r.txt
          echo ----l.txt----
          cat l.txt
          echo ----r.txt----
          cat r.txt
          echo ----comm----
          comm -23 <(sort l.txt) <(sort r.txt)
          echo '----comm >----'
          comm -23 <(sort l.txt) <(sort r.txt) > t.txt
          mv t.txt l.txt
          echo ----l.txt----
          cat l.txt

      - name: inputs json test
        if: ${{inputs.json != ''}}
        run: |
          # https://stackoverflow.com/questions/46954692/check-if-string-is-a-valid-json-with-jq
          echo '${{ inputs.json }}' | jq -e . >/dev/null
          jq -e . >/dev/null <<< '${{ inputs.json }}'
          echo '${{ inputs.json }}' > test.json
          cat test.json
          jq --help

      - name: curl proxy test
        if: ${{inputs.ip != ''}}
        run: |
          set +e
          bc --help
          host1='speed.cloudflare.com'; path1='/cdn-cgi/trace'
          host2='android.chat.openai.com'; path2='/public-api/mobile/server_status/v1'
          curl http://ip.sb
          for ip in ${{ inputs.ip }}; do
            echo ip=$ip
            if curl -so /dev/null -I --connect-timeout 5 --resolve $host1:443:$ip https://$host1$path1; then
              r=`curl -s -w '\n%{http_code}' --connect-timeout 5 --retry 1 --resolve $host2:443:$ip https://$host2$path2`
              echo $? $r;
            fi
          done
          echo 'finished'

      - name: setup node
        if: ${{inputs.domain != ''}}
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: dig test
        if: ${{inputs.domain != ''}}
        run: |
          cat /etc/resolv.conf
          for d in ${{ inputs.domain }}; do
            echo dig $d ...
            dig $d
            dig $d @8.8.8.8
            dig $d @223.5.5.5
            dig $d @76.76.2.0
            dig $d @208.67.222.222
            echo nslookup $d ...
            nslookup $d
            nslookup $d 8.8.8.8
            nslookup $d 223.5.5.5
            nslookup $d 76.76.2.0
            nslookup $d 208.67.222.222
          done
          # echo ----ipv6----
          # for d in ${{ inputs.domain }}; do
          #   echo dig $d ...
          #   dig $d @2400:3200::1
          #   dig $d @2001:4860:4860::8888
          #   dig $d @2606:1a40::
          #   dig $d @2620:119:35::35
          #   dig $d @2606:4700:4700::1111
          #   dig $d @2a10:50c0::ad1:ff
          #   echo nslookup $d ...
          #   nslookup $d 2400:3200::1
          #   nslookup $d 2001:4860:4860::8888
          #   nslookup $d 2606:1a40::
          #   nslookup $d 2620:119:35::35
          #   nslookup $d 2606:4700:4700::1111
          #   nslookup $d 2a10:50c0::ad1:ff
          # done

          echo ----trace----
          for d in ${{ inputs.domain }}; do
            echo dig $d ...
            dig $d +trace
            dig $d @223.5.5.5 +trace
          done
