# This is a basic workflow to help you get started with Actions

name: cfhost Workflow

# Controls when the workflow will run
on:
  schedule:
    # every hour, get kv `cfhost`, test, merge and backup to kv `cfhost_bak`
    - cron: "0 * * * *"
    # every week on sunday morning, test domain in cfhostpat.json
    - cron: "0 23 * * 6"
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    #  branches: [ "main" ]
    paths-ignore:
      - ".gitignore"
      - ".github/workflows/test.yml"
  #  - 'dist/**'
  #pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      CF_WORKER_NAME:
        description: "worker script name for deployment (default take repo variable 'CF_WORKER_NAME')"
        required: false
        default: ""
        type: "string"
      CF_PAGE_NAME:
        description: "page project name for deployment (default take repo variable 'CF_PAGE_NAME')"
        required: false
        default: ""
        type: "string"
      CF_PAGE_BRANCH:
        description: "page branch for deployment environment, empty or 'main' for production env, otherwise for preview (default take repo variable 'CF_PAGE_BRANCH')"
        required: false
        default: ""
        type: "string"
      deployPage:
        description: "deploy worker and page (true: worker and page, false: worker)"
        required: false
        default: "true"
        type: choice
        options:
          - true
          - false
      proxys:
        description: "proxys json data"
        required: false
        type: "string"

  workflow_call:
    inputs:
      proxys:
        description: "proxys json data"
        required: true
        type: "string"
    secrets:
      CF_ACCOUNT_ID:
        required: true
      CF_API_TOKEN:
        required: true
      CF_NAMESPACE_ID:
        required: false
      CF_WORKER_UUID:
        required: false
      CF_PAGE_UUID:
        required: false

env:
  deployPage: ${{inputs.deployPage != 'false'}}
  workerName: ${{inputs.CF_WORKER_NAME || vars.CF_WORKER_NAME}}
  pageName: ${{inputs.CF_PAGE_NAME || vars.CF_PAGE_NAME}}
  pageBranch: ${{inputs.CF_PAGE_BRANCH || vars.CF_PAGE_BRANCH || 'main'}}
  EVENT_NAME: ${{github.event_name}}
  SCHEDULE: ${{github.event.schedule}}

  CF_SCRIPT_API: https://api.cloudflare.com/client/v4/accounts/${{secrets.CF_ACCOUNT_ID}}/workers/scripts
  CF_SERVICE_API: https://api.cloudflare.com/client/v4/accounts/${{secrets.CF_ACCOUNT_ID}}/workers/services
  CF_PROJECT_API: https://api.cloudflare.com/client/v4/accounts/${{secrets.CF_ACCOUNT_ID}}/pages/projects
  CF_KV_API: https://api.cloudflare.com/client/v4/accounts/${{secrets.CF_ACCOUNT_ID}}/storage/kv/namespaces/${{secrets.CF_NAMESPACE_ID || vars.CF_NAMESPACE_ID}}/values
  CF_API_TOKEN: ${{secrets.CF_API_TOKEN}}
  CF_NAMESPACE_ID: ${{secrets.CF_NAMESPACE_ID || vars.CF_NAMESPACE_ID}}
  CF_WORKER_UUID: ${{secrets.CF_WORKER_UUID}}
  CF_PAGE_UUID: ${{secrets.CF_PAGE_UUID}}

  CFHOST: cfhost
  CFHOST_BAK: cfhost_bak
  CFHOST_JSON: src/cfhost.json
  CFHOSTPAT_JS: src/cfhostpat.js
  CFHOSTPAT_JSON: src/cfhostpat.json
  PROXYS: proxys
  PROXYS_UPDATED: proxys_updated
  PROXYS_JSON: src/proxys.json
  ENTRY: dist/_worker.js
  UUID: UUID
  KV: KV

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        with:
          # https://github.com/orgs/community/discussions/25797#discussioncomment-3249294
          fetch-depth: 0

      - id: check-cfhost
        name: check cfhost, merge, backup
        run: |
          [ -z ${{secrets.CF_ACCOUNT_ID}} ] || [ -z $CF_API_TOKEN ] || [ -z $CF_NAMESPACE_ID ] && echo "secrets and CF_NAMESPACE_ID required!" && exit 1;
          . .github/common.sh
          touch remote.txt

          check_backup(){
            if once_week; then
              echo check $CFHOSTPAT_JSON ...
              node $CFHOSTPAT_JS toLines > pat.txt
              filterhost pat.txt handlePat
            fi
            
            json_array_tolines $CFHOST_JSON > local.txt
            echo "$CFHOST_JSON - `wc -l local.txt`" >> $GITHUB_STEP_SUMMARY
            if [ -s local.txt ] && once_day; then
              echo check $CFHOST_JSON ...
              filterhost local.txt > tmp
              [ ! -s tmp ] && echo 'maybe filterhost error!' && exit 1
              file_lines_tojson tmp > $CFHOST_JSON
              mv tmp local.txt
              echo "filter, `wc -l local.txt`" >> $GITHUB_STEP_SUMMARY
            fi
            
            local ret=`curl -H "Authorization:Bearer $CF_API_TOKEN" "$CF_KV_API/$CFHOST"`
            if echo "$ret"|grep error; then
              grep 'namespace not found' <<< "$ret" && exit 1 || echo "$ret"
            elif [ ! -z "$ret" ] && [ "$ret" != "[]" ]; then
              json_array_tolines $ret > remote.txt
              echo "get kv $CFHOST, `wc -l remote.txt`" >> $GITHUB_STEP_SUMMARY
              
              local bak=`curl -H "Authorization:Bearer $CF_API_TOKEN" "$CF_KV_API/$CFHOST_BAK"`
              if ! echo "$bak"|grep error && [ ! -z "$bak" ] && [ "$bak" != "[]" ]; then
                json_array_tolines $bak >> remote.txt
                sort -uo remote.txt remote.txt
                echo "get kv $CFHOST_BAK, merge, `wc -l remote.txt`" >> $GITHUB_STEP_SUMMARY
              fi
                
              #diff -b --suppress-common-lines remote.txt local.txt | grep '<' | sed 's/< *//' > remote.txt
              comm -23 <(sort remote.txt) <(sort local.txt) > tmp && mv tmp remote.txt
              # diff after manually update cfhostpat.json
              echo "diff $CFHOSTPAT_JSON ..."
              local pat=`node $CFHOSTPAT_JS cfhostRE|sed -r 's|^/(.*)/$|\1|'`
              while read -r d; do
                [[ $d =~ $pat ]] && sed -i '/'$d'/d' remote.txt && echo delete $d from remote.txt
              done < remote.txt
              echo "diff local, `wc -l remote.txt`" >> $GITHUB_STEP_SUMMARY
              
              if [ -s remote.txt ]; then
                filterhost remote.txt > tmp && mv tmp remote.txt
                echo "filter, `wc -l remote.txt`" >> $GITHUB_STEP_SUMMARY
              fi
              ret=`file_lines_tojson remote.txt`
              [ "$ret" != "$bak" ] && echo "kvCfhostChanged=true" >> $GITHUB_ENV;
            
              bak=`file_lines_tojson remote.txt`
              curl -X PUT -H "Authorization:Bearer $CF_API_TOKEN" \
                -d "$bak" "$CF_KV_API/$CFHOST_BAK"
              if [ $? = 0 ] && once_day; then
                curl -X PUT -H "Authorization:Bearer $CF_API_TOKEN" \
                  -d "" "$CF_KV_API/$CFHOST"
              fi
            fi
          }
          check_backup

      - id: check-change
        name: check change of cfhost.json, proxys update time
        env:
          GH_TOKEN: ${{ github.token }}
          BEFORE: ${{ github.event.before }}
          AFTER: ${{ github.event.after }}
        run: |
          echo "check change.." >> $GITHUB_STEP_SUMMARY
          if [ `git diff $CFHOST_JSON $CFHOSTPAT_JSON | wc -l` != 0 ]; then
            git config user.name "GitHub Actions Bot"
            git config user.email "<>"
            git add $CFHOST_JSON $CFHOSTPAT_JSON
            git commit -m "updated local $CFHOST"
            git push
            echo "local $CFHOST changed" >> $GITHUB_STEP_SUMMARY
            localCfhostChanged=true
          fi
          if [ "$kvCfhostChanged" != true ] && [ "$localCfhostChanged" != true ]; then
            [ ! -z '${{ inputs.proxys }}' ] || [ $EVENT_NAME != schedule ] && exit;
            
            # cancel when trigger on schedule # [ -z `git diff --name-only $BEFORE $AFTER 2>&1` ]
            # and when now - (updated time of proxys data) >= 7200s
            #df='+%Y-%m-%d %H:%M:%S %z'
            #s=`curl -H "Authorization:Bearer $CF_API_TOKEN" "$CF_KV_API/$PROXYS_UPDATED"`
            #echo "$ret"|grep error && s=0 || echo "$PROXYS_UPDATED: `date "$df" -d @$s`, now: `date "$df"`" >> $GITHUB_STEP_SUMMARY
            #if [ $((`date +%s` - $s)) -ge 7000 ]; then
              echo "on schedule, no change no need to deploy" >> $GITHUB_STEP_SUMMARY
              gh run cancel ${{ github.run_id }}
              gh run watch ${{ github.run_id }}
            #fi
          fi

      - id: get-proxys
        name: prepare cfhost.json proxys.json
        # if: ${{ github.event_name == 'workflow_call' }}
        run: |
          . .github/common.sh
          file_lines_tojson -u remote.txt local.txt > $CFHOST_JSON
          if [ ! -z '${{ inputs.proxys }}' ]; then
            echo '${{ inputs.proxys }}' > $PROXYS_JSON
          else
            ret=`curl -H "Authorization:Bearer $CF_API_TOKEN" "$CF_KV_API/$PROXYS"`
            grep error <<< "$ret" && echo "$ret" || echo "$ret" > $PROXYS_JSON
          fi

      - name: setup node
        if: steps.get-proxys.conclusion == 'success'
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: build worker
        run: |
          npm i
          npm run esbuild

      - name: deploy worker, page
        env:
          CF_PAGE_ENV: ${{env.pageBranch == 'main' && 'production' || 'preview'}}
        run: bash ./deploy.sh && echo "`date '+%Y-%m-%d %H:%M:%S %Z%z'` deploying success ðŸŽ‰" >> $GITHUB_STEP_SUMMARY

  workflow-keepalive:
    if: ${{ github.event_name == 'schedule' }}
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - uses: liskin/gh-workflow-keepalive@v1
